{"ast":null,"code":"const number = password => {\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] >= '0' && password[i] <= '9') {\n      return \"0\";\n    }\n  }\n\n  return \"Password should contain a number\";\n};\n\nconst lowerCase = password => {\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()) {\n      return \"1\";\n    }\n  }\n\n  return \"Password should contain at least a lowercase letter\";\n};\n\nconst upperCase = password => {\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()) {\n      return \"2\";\n    }\n  }\n\n  return \"Password should contain at least an uppercase letter\";\n};\n\nconst specialChar = password => {\n  var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n  if (format.test(password)) {\n    return \"3\";\n  } else return \"Password should co\";\n};\n\nfunction validatePassword(password) {\n  let string = number(password);\n\n  if (string === \"0\") {\n    string = lowerCase(password);\n  }\n\n  if (string === \"1\" || string === \"0\") {\n    string = upperCase(password);\n  }\n\n  if (string === \"2\" || string === \"1\" || string === \"0\") string = specialChar(password);\n  if (string === \"0\" || string === \"1\" || string === \"2\" || string === \"3\") return \"\";else return string;\n}\n\nexport default validatePassword;","map":{"version":3,"sources":["/home/ktrip96/Documents/WebDev/Vodafone/assesment/src/validatePassword.js"],"names":["number","password","i","length","lowerCase","toLowerCase","toUpperCase","upperCase","specialChar","format","test","validatePassword","string"],"mappings":"AAAA,MAAMA,MAAM,GAAIC,QAAD,IAAY;AACvB,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,QAAQ,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,QAAID,QAAQ,CAACC,CAAD,CAAR,IAAa,GAAb,IAAoBD,QAAQ,CAACC,CAAD,CAAR,IAAa,GAArC,EAAyC;AACrC,aAAO,GAAP;AACH;AACJ;;AACD,SAAO,kCAAP;AACH,CAPD;;AASA,MAAME,SAAS,GAAIH,QAAD,IAAY;AAC1B,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,QAAQ,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACxC,QAAID,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYG,WAAZ,EAAhB,IAA6CJ,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYI,WAAZ,EAAjE,EAA2F;AACvF,aAAO,GAAP;AACH;AACJ;;AACD,SAAQ,qDAAR;AACC,CAPD;;AASA,MAAMC,SAAS,GAAIN,QAAD,IAAY;AAC1B,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,QAAQ,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,QAAID,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYG,WAAZ,EAAhB,IAA6CJ,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYI,WAAZ,EAAjE,EAA2F;AACvF,aAAO,GAAP;AACH;AACJ;;AACD,SAAQ,sDAAR;AACH,CAPD;;AASA,MAAME,WAAW,GAAIP,QAAD,IAAY;AAC5B,MAAIQ,MAAM,GAAG,0CAAb;;AACI,MAAGA,MAAM,CAACC,IAAP,CAAYT,QAAZ,CAAH,EAAyB;AACtB,WAAO,GAAP;AACF,GAFD,MAGK,OAAO,oBAAP;AACZ,CAND;;AAQA,SAASU,gBAAT,CAA0BV,QAA1B,EAAmC;AAC/B,MAAIW,MAAM,GAAGZ,MAAM,CAACC,QAAD,CAAnB;;AACA,MAAGW,MAAM,KAAK,GAAd,EAAkB;AACdA,IAAAA,MAAM,GAAGR,SAAS,CAACH,QAAD,CAAlB;AACH;;AACD,MAAGW,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAhC,EAAoC;AAChCA,IAAAA,MAAM,GAAGL,SAAS,CAACN,QAAD,CAAlB;AACH;;AACD,MAAGW,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA7B,IAAoCA,MAAM,KAAK,GAAlD,EACIA,MAAM,GAAGJ,WAAW,CAACP,QAAD,CAApB;AAEJ,MAAGW,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA7B,IAAoCA,MAAM,KAAK,GAA/C,IAAsDA,MAAM,KAAK,GAApE,EAAyE,OAAO,EAAP,CAAzE,KACK,OAAOA,MAAP;AAER;;AAED,eAAeD,gBAAf","sourcesContent":["const number = (password)=>{\n    for(let i = 0; i < password.length; i++){\n        if (password[i]>='0' && password[i]<='9'){\n            return \"0\"\n        }\n    }\n    return \"Password should contain a number\"\n}\n\nconst lowerCase = (password)=>{\n    for(let i = 0; i < password.length; i++){\n    if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()){\n        return \"1\"\n    }\n}\nreturn  \"Password should contain at least a lowercase letter\"\n}\n\nconst upperCase = (password)=>{\n    for(let i = 0; i < password.length; i++){\n        if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()){\n            return \"2\"\n        }\n    }\n    return  \"Password should contain at least an uppercase letter\"\n}\n\nconst specialChar = (password)=>{\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n        if(format.test(password)){\n           return \"3\"\n        }\n        else return \"Password should co\"\n}\n\nfunction validatePassword(password){\n    let string = number(password)\n    if(string === \"0\"){\n        string = lowerCase(password)\n    }\n    if(string === \"1\" || string === \"0\"){\n        string = upperCase(password)\n    }\n    if(string === \"2\" || string === \"1\" || string === \"0\")\n        string = specialChar(password)\n    \n    if(string === \"0\" || string === \"1\" || string === \"2\" || string === \"3\") return \"\"\n    else return string\n\n}\n\nexport default validatePassword"]},"metadata":{},"sourceType":"module"}