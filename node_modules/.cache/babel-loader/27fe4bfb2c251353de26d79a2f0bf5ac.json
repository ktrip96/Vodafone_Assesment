{"ast":null,"code":"function validatePassword(password) {\n  let string = \"\";\n\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] >= '0' && password[i] <= '9') {\n      string = \"\";\n    }\n  }\n\n  string = \"Password should contain a number\";\n\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()) {}\n  }\n\n  return false;\n\n  const lowerCase = () => {\n    for (let i = 0; i < password.length; i++) {\n      if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const specialChar = () => {\n    // eslint-disable-next-line\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n    return format.test(password);\n  };\n\n  return string;\n}\n\nexport default validatePassword;","map":{"version":3,"sources":["/home/ktrip96/Documents/WebDev/Vodafone/assesment/src/validatePassword.js"],"names":["validatePassword","password","string","i","length","toLowerCase","toUpperCase","lowerCase","specialChar","format","test"],"mappings":"AAAA,SAASA,gBAAT,CAA0BC,QAA1B,EAAmC;AAC/B,MAAIC,MAAM,GAAG,EAAb;;AACI,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,QAAQ,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,QAAIF,QAAQ,CAACE,CAAD,CAAR,IAAa,GAAb,IAAoBF,QAAQ,CAACE,CAAD,CAAR,IAAa,GAArC,EAAyC;AACrCD,MAAAA,MAAM,GAAG,EAAT;AACH;AACJ;;AACLA,EAAAA,MAAM,GAAG,kCAAT;;AAEI,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,QAAQ,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,QAAIF,QAAQ,CAACE,CAAD,CAAR,KAAgBF,QAAQ,CAACE,CAAD,CAAR,CAAYE,WAAZ,EAAhB,IAA6CJ,QAAQ,CAACE,CAAD,CAAR,KAAgBF,QAAQ,CAACE,CAAD,CAAR,CAAYG,WAAZ,EAAjE,EAA2F,CAE1F;AACJ;;AACD,SAAO,KAAP;;AAEJ,QAAMC,SAAS,GAAG,MAAI;AAClB,SAAI,IAAIJ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,QAAQ,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,UAAIF,QAAQ,CAACE,CAAD,CAAR,KAAgBF,QAAQ,CAACE,CAAD,CAAR,CAAYE,WAAZ,EAAhB,IAA6CJ,QAAQ,CAACE,CAAD,CAAR,KAAgBF,QAAQ,CAACE,CAAD,CAAR,CAAYG,WAAZ,EAAjE,EAA2F;AACvF,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAPD;;AASA,QAAME,WAAW,GAAG,MAAK;AACrB;AACA,QAAIC,MAAM,GAAG,0CAAb;AACA,WAAOA,MAAM,CAACC,IAAP,CAAYT,QAAZ,CAAP;AACH,GAJD;;AAMA,SAAOC,MAAP;AAEH;;AAED,eAAeF,gBAAf","sourcesContent":["function validatePassword(password){\n    let string = \"\"\n        for(let i = 0; i < password.length; i++){\n            if (password[i]>='0' && password[i]<='9'){\n                string = \"\"\n            }\n        }\n    string = \"Password should contain a number\"\n\n        for(let i = 0; i < password.length; i++){\n            if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()){\n                \n            }\n        }\n        return false\n\n    const lowerCase = ()=>{\n        for(let i = 0; i < password.length; i++){\n            if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()){\n                return true\n            }\n        }\n        return false\n    }\n\n    const specialChar = () =>{\n        // eslint-disable-next-line\n        var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n        return format.test(password)\n    }\n\n    return string\n\n}\n\nexport default validatePassword"]},"metadata":{},"sourceType":"module"}