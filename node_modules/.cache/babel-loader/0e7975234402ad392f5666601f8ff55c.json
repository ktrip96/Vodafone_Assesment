{"ast":null,"code":"const number = password => {\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] >= '0' && password[i] <= '9') {\n      return \"0\";\n    }\n  }\n\n  return \"Password should contain a number\";\n};\n\nconst lowerCase = password => {\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()) {\n      return \"1\";\n    }\n  }\n\n  return \"Password should contain at least a lowercase letter\";\n};\n\nconst upperCase = password => {\n  for (let i = 0; i < password.length; i++) {\n    if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()) {\n      return \"2\";\n    }\n  }\n\n  return \"Password should contain at least an uppercase letter\";\n};\n\nconst specialChar = password => {\n  // eslint-disable-next-line\n  var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n  if (format.test(password)) {\n    return \"3\";\n  } else return \"Password should contain at least one symbol\";\n};\n\nfunction validatePassword(password) {\n  let string = number(password);\n\n  if (string === \"0\") {\n    string = lowerCase(password);\n  }\n\n  if (string === \"1\" || string === \"0\") {\n    string = upperCase(password);\n  }\n\n  if (string === \"2\" || string === \"1\" || string === \"0\") string = specialChar(password);\n  if (string === \"0\" || string === \"1\" || string === \"2\" || string === \"3\") return \"\";else return string;\n}\n\nexport default validatePassword;","map":{"version":3,"sources":["/home/ktrip96/Documents/WebDev/Vodafone_Assesment/src/Validations/validatePassword.js"],"names":["number","password","i","length","lowerCase","toLowerCase","toUpperCase","upperCase","specialChar","format","test","validatePassword","string"],"mappings":"AAAA,MAAMA,MAAM,GAAIC,QAAD,IAAc;AACzB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAID,QAAQ,CAACC,CAAD,CAAR,IAAe,GAAf,IAAsBD,QAAQ,CAACC,CAAD,CAAR,IAAe,GAAzC,EAA8C;AAC1C,aAAO,GAAP;AACH;AACJ;;AACD,SAAO,kCAAP;AACH,CAPD;;AASA,MAAME,SAAS,GAAIH,QAAD,IAAc;AAC5B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAID,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYG,WAAZ,EAAhB,IAA6CJ,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYI,WAAZ,EAAjE,EAA4F;AACxF,aAAO,GAAP;AACH;AACJ;;AACD,SAAO,qDAAP;AACH,CAPD;;AASA,MAAMC,SAAS,GAAIN,QAAD,IAAc;AAC5B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,QAAID,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYG,WAAZ,EAAhB,IAA6CJ,QAAQ,CAACC,CAAD,CAAR,KAAgBD,QAAQ,CAACC,CAAD,CAAR,CAAYI,WAAZ,EAAjE,EAA4F;AACxF,aAAO,GAAP;AACH;AACJ;;AACD,SAAO,sDAAP;AACH,CAPD;;AASA,MAAME,WAAW,GAAIP,QAAD,IAAc;AAC9B;AACA,MAAIQ,MAAM,GAAG,0CAAb;;AACA,MAAIA,MAAM,CAACC,IAAP,CAAYT,QAAZ,CAAJ,EAA2B;AACvB,WAAO,GAAP;AACH,GAFD,MAGK,OAAO,6CAAP;AACR,CAPD;;AASA,SAASU,gBAAT,CAA0BV,QAA1B,EAAoC;AAChC,MAAIW,MAAM,GAAGZ,MAAM,CAACC,QAAD,CAAnB;;AACA,MAAIW,MAAM,KAAK,GAAf,EAAoB;AAChBA,IAAAA,MAAM,GAAGR,SAAS,CAACH,QAAD,CAAlB;AACH;;AACD,MAAIW,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCA,IAAAA,MAAM,GAAGL,SAAS,CAACN,QAAD,CAAlB;AACH;;AACD,MAAIW,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA7B,IAAoCA,MAAM,KAAK,GAAnD,EACIA,MAAM,GAAGJ,WAAW,CAACP,QAAD,CAApB;AAEJ,MAAIW,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAA7B,IAAoCA,MAAM,KAAK,GAA/C,IAAsDA,MAAM,KAAK,GAArE,EAA0E,OAAO,EAAP,CAA1E,KACK,OAAOA,MAAP;AAER;;AAED,eAAeD,gBAAf","sourcesContent":["const number = (password) => {\n    for (let i = 0; i < password.length; i++) {\n        if (password[i] >= '0' && password[i] <= '9') {\n            return \"0\"\n        }\n    }\n    return \"Password should contain a number\"\n}\n\nconst lowerCase = (password) => {\n    for (let i = 0; i < password.length; i++) {\n        if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()) {\n            return \"1\"\n        }\n    }\n    return \"Password should contain at least a lowercase letter\"\n}\n\nconst upperCase = (password) => {\n    for (let i = 0; i < password.length; i++) {\n        if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()) {\n            return \"2\"\n        }\n    }\n    return \"Password should contain at least an uppercase letter\"\n}\n\nconst specialChar = (password) => {\n    // eslint-disable-next-line\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n    if (format.test(password)) {\n        return \"3\"\n    }\n    else return \"Password should contain at least one symbol\"\n}\n\nfunction validatePassword(password) {\n    let string = number(password)\n    if (string === \"0\") {\n        string = lowerCase(password)\n    }\n    if (string === \"1\" || string === \"0\") {\n        string = upperCase(password)\n    }\n    if (string === \"2\" || string === \"1\" || string === \"0\")\n        string = specialChar(password)\n\n    if (string === \"0\" || string === \"1\" || string === \"2\" || string === \"3\") return \"\"\n    else return string\n\n}\n\nexport default validatePassword"]},"metadata":{},"sourceType":"module"}