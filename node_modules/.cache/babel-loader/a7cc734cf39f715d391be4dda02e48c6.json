{"ast":null,"code":"function validatePassword(password) {\n  const string = \"\";\n\n  const number = () => {\n    for (let i = 0; i < password.length; i++) {\n      if (password[i] >= '0' && password[i] <= '9') {\n        string = \"\";\n      }\n    }\n\n    string = \"Password should contain a number\";\n  };\n\n  const upperCase = () => {\n    for (let i = 0; i < password.length; i++) {\n      if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const lowerCase = () => {\n    for (let i = 0; i < password.length; i++) {\n      if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const specialChar = () => {\n    // eslint-disable-next-line\n    var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n    return format.test(password);\n  };\n\n  return number && upperCase && lowerCase && specialChar;\n}\n\nexport default validatePassword;","map":{"version":3,"sources":["/home/ktrip96/Documents/WebDev/Vodafone/assesment/src/validatePassword.js"],"names":["validatePassword","password","string","number","i","length","upperCase","toLowerCase","toUpperCase","lowerCase","specialChar","format","test"],"mappings":"AAAA,SAASA,gBAAT,CAA0BC,QAA1B,EAAmC;AAC/B,QAAMC,MAAM,GAAG,EAAf;;AACA,QAAMC,MAAM,GAAG,MAAM;AACjB,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAQ,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,UAAIH,QAAQ,CAACG,CAAD,CAAR,IAAa,GAAb,IAAoBH,QAAQ,CAACG,CAAD,CAAR,IAAa,GAArC,EAAyC;AACrCF,QAAAA,MAAM,GAAG,EAAT;AACH;AACJ;;AACDA,IAAAA,MAAM,GAAG,kCAAT;AAEH,GARD;;AAUA,QAAMI,SAAS,GAAG,MAAI;AAClB,SAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAQ,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,UAAIH,QAAQ,CAACG,CAAD,CAAR,KAAgBH,QAAQ,CAACG,CAAD,CAAR,CAAYG,WAAZ,EAAhB,IAA6CN,QAAQ,CAACG,CAAD,CAAR,KAAgBH,QAAQ,CAACG,CAAD,CAAR,CAAYI,WAAZ,EAAjE,EAA2F;AACvF,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAPD;;AASA,QAAMC,SAAS,GAAG,MAAI;AAClB,SAAI,IAAIL,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,QAAQ,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACpC,UAAIH,QAAQ,CAACG,CAAD,CAAR,KAAgBH,QAAQ,CAACG,CAAD,CAAR,CAAYG,WAAZ,EAAhB,IAA6CN,QAAQ,CAACG,CAAD,CAAR,KAAgBH,QAAQ,CAACG,CAAD,CAAR,CAAYI,WAAZ,EAAjE,EAA2F;AACvF,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAPD;;AASA,QAAME,WAAW,GAAG,MAAK;AACrB;AACA,QAAIC,MAAM,GAAG,0CAAb;AACA,WAAOA,MAAM,CAACC,IAAP,CAAYX,QAAZ,CAAP;AACH,GAJD;;AAMA,SAAQE,MAAM,IAAEG,SAAR,IAAmBG,SAAnB,IAA8BC,WAAtC;AAEH;;AAED,eAAeV,gBAAf","sourcesContent":["function validatePassword(password){\n    const string = \"\"\n    const number = () => {\n        for(let i = 0; i < password.length; i++){\n            if (password[i]>='0' && password[i]<='9'){\n                string = \"\"\n            }\n        }\n        string = \"Password should contain a number\"\n        \n    }\n\n    const upperCase = ()=>{\n        for(let i = 0; i < password.length; i++){\n            if (password[i] !== password[i].toLowerCase() && password[i] === password[i].toUpperCase()){\n                return true\n            }\n        }\n        return false\n    }\n\n    const lowerCase = ()=>{\n        for(let i = 0; i < password.length; i++){\n            if (password[i] === password[i].toLowerCase() && password[i] !== password[i].toUpperCase()){\n                return true\n            }\n        }\n        return false\n    }\n\n    const specialChar = () =>{\n        // eslint-disable-next-line\n        var format = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/\n        return format.test(password)\n    }\n\n    return (number&&upperCase&&lowerCase&&specialChar)\n\n}\n\nexport default validatePassword"]},"metadata":{},"sourceType":"module"}